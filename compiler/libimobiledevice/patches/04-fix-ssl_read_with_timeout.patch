diff --git a/src/idevice.c b/src/idevice.c
index 06991c5..8b6495e 100644
--- a/src/idevice.c
+++ b/src/idevice.c
@@ -28,6 +28,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
+#include <time.h>
+#include <sys/types.h>
+#include <sys/timeb.h>

 #include <usbmuxd.h>
 #ifdef HAVE_OPENSSL
@@ -449,6 +452,13 @@ static idevice_error_t internal_connection_receive_timeout(idevice_connection_t
 	return IDEVICE_E_UNKNOWN_ERROR;
 }

+// TODO: temporally code, move to utils?
+static long long miliseconds() {
+	struct timeb rawtime;
+	ftime(&rawtime);
+	return rawtime.time * 1000 + rawtime.millitm;
+}
+
 LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_connection_t connection, char *data, uint32_t len, uint32_t *recv_bytes, unsigned int timeout)
 {
 	if (!connection || (connection->ssl_data && !connection->ssl_data->session) || len == 0) {
@@ -458,18 +468,22 @@ LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_
 	if (connection->ssl_data) {
 		uint32_t received = 0;
 		int do_select = 1;
-
-		while (received < len) {
+		int timeout_left;
+		long long timeout_ts = miliseconds() + timeout;
+		while (received < len && (timeout_left = timeout_ts - miliseconds()) > 0) {
 #ifdef HAVE_OPENSSL
 			do_select = (SSL_pending(connection->ssl_data->session) == 0);
 #endif
 			if (do_select) {
-				int conn_error = socket_check_fd((int)(long)connection->data, FDM_READ, timeout);
+				int conn_error = socket_check_fd((int)(long)connection->data, FDM_READ, timeout_left);
 				idevice_error_t error = socket_recv_to_idevice_error(conn_error, len, received);

 				switch (error) {
 					case IDEVICE_E_SUCCESS:
 						break;
+					case IDEVICE_E_TIMEOUT:
+						*recv_bytes = received;
+						return IDEVICE_E_TIMEOUT;
 					case IDEVICE_E_UNKNOWN_ERROR:
 						debug_info("ERROR: socket_check_fd returned %d (%s)", conn_error, strerror(-conn_error));
 					default:
@@ -484,18 +498,19 @@ LIBIMOBILEDEVICE_API idevice_error_t idevice_connection_receive_timeout(idevice_
 #endif
 			if (r > 0) {
 				received += r;
-			} else {
+			} else if (r < 0) {
+				*recv_bytes = 0;
+				return IDEVICE_E_SSL_ERROR;
 				break;
 			}
 		}
 
 		debug_info("SSL_read %d, received %d", len, received);
+		*recv_bytes = received;
 		if (received < len) {
-			*recv_bytes = 0;
-			return IDEVICE_E_SSL_ERROR;
+			return IDEVICE_E_TIMEOUT;
 		}
 		
-		*recv_bytes = received;
 		return IDEVICE_E_SUCCESS;
 	}
 	return internal_connection_receive_timeout(connection, data, len, recv_bytes, timeout);
