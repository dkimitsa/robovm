From de06df7731fea323d544692b221bb67576a52d77 Mon Sep 17 00:00:00 2001
From: eliyahustern <eliyahu@experitest.com>
Date: Sun, 23 Aug 2020 21:23:12 +0300
Subject: [PATCH] Resolves #1004: fallback to secured services

---
 include/libimobiledevice/debugserver.h |  1 +
 include/libimobiledevice/lockdown.h    |  1 +
 src/debugserver.c                      |  7 ++-
 src/lockdown.c                         | 81 ++++++++++++++++++--------
 4 files changed, 66 insertions(+), 24 deletions(-)

diff --git a/include/libimobiledevice/debugserver.h b/include/libimobiledevice/debugserver.h
index 8ff31fb9..55c4ddc8 100644
--- a/include/libimobiledevice/debugserver.h
+++ b/include/libimobiledevice/debugserver.h
@@ -31,6 +31,7 @@ extern "C" {
 #include <libimobiledevice/lockdown.h>
 
 #define DEBUGSERVER_SERVICE_NAME "com.apple.debugserver"
+#define DEBUGSERVER_SECURED_SERVICE_NAME "com.apple.debugserver.DVTSecureSocketProxy"
 
 /** Error Codes */
 typedef enum {
diff --git a/include/libimobiledevice/lockdown.h b/include/libimobiledevice/lockdown.h
index a660f33e..f19abbd1 100644
--- a/include/libimobiledevice/lockdown.h
+++ b/include/libimobiledevice/lockdown.h
@@ -96,6 +96,7 @@ typedef struct lockdownd_pair_record *lockdownd_pair_record_t;
 struct lockdownd_service_descriptor {
 	uint16_t port;
 	uint8_t ssl_enabled;
+    char* identifier;
 };
 typedef struct lockdownd_service_descriptor *lockdownd_service_descriptor_t;
 
diff --git a/src/debugserver.c b/src/debugserver.c
index c5170171..d8ea52f7 100644
--- a/src/debugserver.c
+++ b/src/debugserver.c
@@ -79,7 +79,12 @@ LIBIMOBILEDEVICE_API debugserver_error_t debugserver_client_new(idevice_t device
 		debug_info("Creating base service client failed. Error: %i", ret);
 		return ret;
 	}
-	service_disable_bypass_ssl(parent, 1);
+    
+    /* Disable service SSL only in iOS 13, where "com.apple.debugserver"
+     is not yet replaced by "com.apple.debugserver.DVTSecureSocketProxy" */
+    if (strcmp(service->identifier, "com.apple.debugserver") == 0) {
+        service_disable_bypass_ssl(parent, 1);
+    }
 
 	debugserver_client_t client_loc = (debugserver_client_t) malloc(sizeof(struct debugserver_client_private));
 	client_loc->parent = parent;
diff --git a/src/lockdown.c b/src/lockdown.c
index 79353f23..6ec9d58b 100644
--- a/src/lockdown.c
+++ b/src/lockdown.c
@@ -47,6 +47,7 @@
 #include "property_list_service.h"
 #include "lockdown.h"
 #include "idevice.h"
+#include "debugserver.h"
 #include "common/debug.h"
 #include "common/userpref.h"
 #include "common/utils.h"
@@ -1276,6 +1277,36 @@ static lockdownd_error_t lockdownd_build_start_service_request(lockdownd_client_
 	return LOCKDOWN_E_SUCCESS;
 }
 
+static void send_start_service_receive_response(lockdownd_client_t client, plist_t *dict, const char *identifier, lockdownd_error_t *ret, int send_escrow_bag) {
+    /* create StartService request */
+    *ret = lockdownd_build_start_service_request(client, identifier, send_escrow_bag, dict);
+    if (LOCKDOWN_E_SUCCESS != *ret)
+        return;
+
+    /* send to device */
+    *ret = lockdownd_send(client, *dict);
+    plist_free(*dict);
+    *dict = NULL;
+
+    if (LOCKDOWN_E_SUCCESS != *ret)
+        return;
+
+    /* receive respose */
+    *ret = lockdownd_receive(client, dict);
+
+    if (LOCKDOWN_E_SUCCESS != *ret)
+        return;
+
+    if (!*dict) {
+        *ret = LOCKDOWN_E_PLIST_ERROR;
+        return;
+    }
+    
+
+    /* extract response error */
+    *ret = lockdown_check_result(*dict, "StartService");
+}
+
 /**
  * Function used internally by lockdownd_start_service and lockdownd_start_service_with_escrow_bag.
  *
@@ -1299,39 +1330,39 @@ static lockdownd_error_t lockdownd_do_start_service(lockdownd_client_t client, c
 		// reset fields if service descriptor is reused
 		(*service)->port = 0;
 		(*service)->ssl_enabled = 0;
+        if ((*service)->identifier) {
+            free((*service)->identifier);
+            (*service)->identifier = NULL;
+        }
 	}
 
 	plist_t dict = NULL;
 	uint16_t port_loc = 0;
 	lockdownd_error_t ret = LOCKDOWN_E_UNKNOWN_ERROR;
 
-	/* create StartService request */
-	ret = lockdownd_build_start_service_request(client, identifier, send_escrow_bag, &dict);
-	if (LOCKDOWN_E_SUCCESS != ret)
-		return ret;
-
-	/* send to device */
-	ret = lockdownd_send(client, dict);
-	plist_free(dict);
-	dict = NULL;
-
-	if (LOCKDOWN_E_SUCCESS != ret)
-		return ret;
-
-	ret = lockdownd_receive(client, &dict);
-
-	if (LOCKDOWN_E_SUCCESS != ret)
-		return ret;
-
-	if (!dict)
-		return LOCKDOWN_E_PLIST_ERROR;
-
-	ret = lockdown_check_result(dict, "StartService");
+    
+    send_start_service_receive_response(client, &dict, identifier, &ret, send_escrow_bag);
+    
+    if (ret == LOCKDOWN_E_INVALID_SERVICE) {
+        /* In iOS 14 some DDI services were removed in favor of a secured version */
+        if (strcmp("com.apple.instruments.remoteserver", identifier) == 0) {
+            identifier = "com.apple.instruments.remoteserver.DVTSecureSocketProxy";
+            send_start_service_receive_response(client, &dict, identifier, &ret, send_escrow_bag);
+        } else if (strcmp("com.apple.testmanagerd.lockdown", identifier) == 0) {
+            identifier = "com.apple.testmanagerd.lockdown.secure";
+            send_start_service_receive_response(client, &dict, identifier, &ret, send_escrow_bag);
+        } else if (strcmp(DEBUGSERVER_SERVICE_NAME, identifier) == 0) {
+            identifier = DEBUGSERVER_SECURED_SERVICE_NAME;
+            send_start_service_receive_response(client, &dict, identifier, &ret, send_escrow_bag);
+        }
+    }
+    
 	if (ret == LOCKDOWN_E_SUCCESS) {
 		if (*service == NULL)
 			*service = (lockdownd_service_descriptor_t)malloc(sizeof(struct lockdownd_service_descriptor));
 		(*service)->port = 0;
 		(*service)->ssl_enabled = 0;
+        (*service)->identifier = strdup(identifier);
 
 		/* read service port number */
 		plist_t node = plist_dict_get_item(dict, "Port");
@@ -1536,8 +1567,12 @@ LIBIMOBILEDEVICE_API lockdownd_error_t lockdownd_data_classes_free(char **classe
 
 LIBIMOBILEDEVICE_API lockdownd_error_t lockdownd_service_descriptor_free(lockdownd_service_descriptor_t service)
 {
-	if (service)
+    if (service) {
+        if (service->identifier) {
+            free(service->identifier);
+        }
 		free(service);
+    }
 
 	return LOCKDOWN_E_SUCCESS;
 }
